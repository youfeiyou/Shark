// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SigServiceClient is the client API for SigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigServiceClient interface {
	UpLoad(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	Download(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
}

type sigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigServiceClient(cc grpc.ClientConnInterface) SigServiceClient {
	return &sigServiceClient{cc}
}

func (c *sigServiceClient) UpLoad(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/pb.SigService/UpLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigServiceClient) Download(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/pb.SigService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigServiceServer is the server API for SigService service.
// All implementations must embed UnimplementedSigServiceServer
// for forward compatibility
type SigServiceServer interface {
	UpLoad(context.Context, *Req) (*Rsp, error)
	Download(context.Context, *Req) (*Rsp, error)
	mustEmbedUnimplementedSigServiceServer()
}

// UnimplementedSigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSigServiceServer struct {
}

func (UnimplementedSigServiceServer) UpLoad(context.Context, *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpLoad not implemented")
}
func (UnimplementedSigServiceServer) Download(context.Context, *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedSigServiceServer) mustEmbedUnimplementedSigServiceServer() {}

// UnsafeSigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigServiceServer will
// result in compilation errors.
type UnsafeSigServiceServer interface {
	mustEmbedUnimplementedSigServiceServer()
}

func RegisterSigServiceServer(s grpc.ServiceRegistrar, srv SigServiceServer) {
	s.RegisterService(&SigService_ServiceDesc, srv)
}

func _SigService_UpLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigServiceServer).UpLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SigService/UpLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigServiceServer).UpLoad(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SigService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigServiceServer).Download(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// SigService_ServiceDesc is the grpc.ServiceDesc for SigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SigService",
	HandlerType: (*SigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpLoad",
			Handler:    _SigService_UpLoad_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _SigService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
